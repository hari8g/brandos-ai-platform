import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Badge } from "@/components/ui/badge";
import PHMeter from "./PHMeter";
function getRole(name) {
    name = name.toLowerCase();
    if (["niacinamide", "salicylic acid", "vitamin c", "retinol", "hyaluronic acid", "peptides"].includes(name))
        return "Active";
    if (["phenoxyethanol", "ethylhexylglycerin", "benzoic acid", "sorbic acid"].includes(name))
        return "Preservative";
    if (["glycerin", "aloe vera juice", "water", "distilled water", "purified water"].includes(name))
        return "Base";
    if (["dimethicone", "cyclomethicone", "caprylic triglyceride"].includes(name))
        return "Emollient";
    if (["xanthan gum", "carbomer", "cellulose gum"].includes(name))
        return "Thickener";
    return "Other";
}
export default function FormulationCard({ data }) {
    // Guard against invalid or missing data
    if (!data ||
        typeof data !== "object" ||
        typeof data.product_name !== "string" ||
        !Array.isArray(data.ingredients) ||
        data.ingredients.length === 0 ||
        typeof data.estimated_cost !== "number" ||
        typeof data.predicted_ph !== "number") {
        return null;
    }
    // Optionally, you can add more granular checks for each ingredient
    const validIngredients = data.ingredients.every((item) => item && typeof item.name === "string" && typeof item.percent === "number");
    if (!validIngredients) {
        return null;
    }
    return (_jsxs("div", { className: "mt-10 bg-white p-6 rounded-2xl shadow-md w-full max-w-xl transition-all duration-500", children: [_jsx("h2", { className: "text-2xl font-bold text-indigo-600 mb-4", children: data.product_name }), data.query_quality_score !== undefined && (_jsxs("div", { className: "mb-6 p-4 bg-orange-50 rounded-lg border-l-4 border-orange-400", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h3", { className: "font-semibold text-orange-800", children: "\uD83D\uDD0D Query Quality Assessment" }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("span", { className: "text-sm text-orange-700", children: "Score:" }), _jsxs(Badge, { variant: data.query_quality_score >= 5 ? "default" : "destructive", children: [data.query_quality_score, "/7"] })] })] }), data.query_quality_feedback && (_jsx("p", { className: "text-orange-700 text-sm mb-3", children: data.query_quality_feedback })), data.quality_warnings && data.quality_warnings.length > 0 && (_jsxs("div", { className: "mb-3", children: [_jsx("h4", { className: "font-medium text-orange-800 text-sm mb-2", children: "\u26A0\uFE0F Warnings:" }), _jsx("ul", { className: "list-disc list-inside text-orange-700 text-sm space-y-1", children: data.quality_warnings.map((warning, index) => (_jsx("li", { children: warning }, index))) })] })), data.improvement_suggestions && data.improvement_suggestions.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium text-orange-800 text-sm mb-2", children: "\uD83D\uDCA1 Suggestions to improve your query:" }), _jsx("ul", { className: "list-disc list-inside text-orange-700 text-sm space-y-1", children: data.improvement_suggestions.map((suggestion, index) => (_jsx("li", { children: suggestion }, index))) })] }))] })), data.reasoning && (_jsxs("div", { className: "mb-6 p-4 bg-blue-50 rounded-lg", children: [_jsx("h3", { className: "font-semibold text-blue-800 mb-2", children: "Formulation Reasoning" }), _jsx("p", { className: "text-blue-700 text-sm leading-relaxed", children: data.reasoning })] })), _jsxs("div", { className: "mb-6", children: [_jsx("h3", { className: "font-semibold text-gray-800 mb-3", children: "\uD83D\uDCCB Ingredients" }), _jsx("ul", { className: "space-y-4", children: data.ingredients.map((item, i) => (_jsxs("li", { className: "flex flex-col border-b pb-2", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("span", { className: "font-semibold", children: item.name }), _jsx(Badge, { variant: "outline", children: getRole(item.name) })] }), _jsxs("div", { className: "flex items-center space-x-3", children: [_jsxs("span", { className: "font-medium", children: [item.percent, "%"] }), _jsxs("span", { className: "text-xs text-gray-500", children: ["\u20B9", item.cost_per_100ml, "/100ml"] })] })] }), item.suppliers && item.suppliers.length > 0 && (_jsxs("div", { className: "mt-1 ml-2", children: [_jsx("span", { className: "text-xs text-gray-600 font-medium", children: "Suppliers:" }), _jsx("ul", { className: "ml-2 list-disc text-xs text-gray-700", children: item.suppliers.map((sup, idx) => (_jsxs("li", { className: "mb-1", children: [_jsx("span", { className: "font-semibold", children: sup.name }), " (", sup.location, ")", sup.url && (_jsx("a", { href: sup.url, target: "_blank", rel: "noopener noreferrer", className: "ml-1 text-blue-600 underline", children: "link" })), _jsxs("span", { className: "ml-1", children: ["\u20B9", sup.price_per_100ml, "/100ml"] })] }, idx))) })] })), item.alternatives && item.alternatives.length > 0 && (_jsxs("div", { className: "mt-1 ml-2", children: [_jsx("span", { className: "text-xs text-gray-600 font-medium", children: "Alternatives:" }), _jsx("ul", { className: "ml-2 list-disc text-xs text-gray-700", children: item.alternatives.map((alt, idx) => (_jsxs("li", { className: "mb-1", children: [_jsx("span", { className: "font-semibold", children: alt.name }), " (Price impact: ", _jsxs("span", { className: alt.price_impact < 0 ? 'text-green-600' : 'text-red-600', children: ["\u20B9", alt.price_impact] }), ")", _jsx("br", {}), _jsx("span", { className: "text-gray-500", children: alt.reasoning })] }, idx))) })] }))] }, i))) })] }), data.pricing && (_jsxs("div", { className: "mb-6 p-4 bg-green-50 rounded-lg", children: [_jsx("h3", { className: "font-semibold text-green-800 mb-2", children: "\uD83D\uDCB8 Pricing Estimates" }), _jsxs("div", { className: "flex flex-col md:flex-row md:space-x-8", children: [_jsxs("div", { className: "mb-2 md:mb-0", children: [_jsx("span", { className: "text-gray-700 font-medium", children: "Small Batch (100 units): " }), _jsxs("span", { className: "font-bold text-green-700", children: ["\u20B9", data.pricing.small_batch] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-700 font-medium", children: "Medium Scale (10,000 units): " }), _jsxs("span", { className: "font-bold text-green-700", children: ["\u20B9", data.pricing.medium_scale] })] })] }), data.pricing.reasoning && (_jsx("div", { className: "mt-2 text-xs text-green-900", children: data.pricing.reasoning }))] })), data.safety_notes && data.safety_notes.length > 0 && (_jsxs("div", { className: "mb-6 p-4 bg-amber-50 rounded-lg", children: [_jsx("h3", { className: "font-semibold text-amber-800 mb-2", children: "\u26A0\uFE0F Safety Notes" }), _jsx("ul", { className: "list-disc list-inside text-amber-700 text-sm space-y-1", children: data.safety_notes.map((note, index) => (_jsx("li", { children: note }, index))) })] })), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center p-3 bg-gray-50 rounded-lg", children: [_jsx("span", { className: "font-semibold text-gray-700", children: "\uD83D\uDCB0 Estimated Cost:" }), _jsxs("span", { className: "font-bold text-green-600", children: ["\u20B9", data.estimated_cost] })] }), _jsx("div", { children: _jsx(PHMeter, { ph: data.predicted_ph }) })] }), _jsx("div", { className: "mt-6 pt-4 border-t border-gray-200", children: _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-500", children: "Total Ingredients:" }), _jsx("span", { className: "ml-2 font-medium", children: data.ingredients.length })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-500", children: "Category:" }), _jsx("span", { className: "ml-2 font-medium capitalize", children: data.category || 'Custom' })] })] }) })] }));
}
